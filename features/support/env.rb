# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.
require 'simplecov'
SimpleCov.start do
  add_filter '/features/'
  add_filter '/config/initializers/force_ssl_extension.rb'
  add_filter '/app/models/image_service.rb'
  add_filter 'app/helpers/user_details_helper.rb'
end


#require 'simplecov-json'
#SimpleCov.formatter = SimpleCov::Formatter::JSONFormatter

require 'cucumber/rails'

# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  DatabaseCleaner.strategy = :transaction
rescue NameError
  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
end

Before do
DatabaseCleaner.start
load Rails.root.join('db/seeds.rb')
end

After do |scenario|
DatabaseCleaner.clean
end


# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { :except => [:widgets] } may not do what you expect here
#     # as Cucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
#     DatabaseCleaner.strategy = :truncation
#   end
#
#   Before('~@no-txn', '~@selenium', '~@culerity', '~@celerity', '~@javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
Cucumber::Rails::Database.javascript_strategy = :truncation

require 'capybara/poltergeist'
# Set the web driver for testing to PhantomJS, due to Nitrous not having
# firefox installed. Works just as well, just without functionality
# to view tests live (I do not require this anyway).
Capybara.register_driver :poltergeist do |app|
    Capybara::Poltergeist::Driver.new(app, {debug: false})
end

Capybara.javascript_driver = :poltergeist
# Method for signing a user in, providing username and password is
# given. This reduces code in the user steps file.
def signIn(login, password)
  visit root_path
  visit "/session/new"
  fill_in "login", :with => login
  fill_in "password", :with => password
  within(".content") do
    click_button "Login"
  end
end
# Used in a range of tests, this first looks for the checkbox required by
# a test via an id, then sets it to a boolean value also passed in by
# the test. It is also checked here if the checkbox value was changed.
# Again, reduces code needed in step files.
def check_Checkbox(id, checked)
  find(:xpath, "//*[@id='#{id}']").set(checked)
  if (checked == true)
    expect(find(:xpath, "//*[@id='#{id}']")).to be_checked
  else
    expect(find(:xpath, "//*[@id='#{id}']")).to_not be_checked
  end
end
